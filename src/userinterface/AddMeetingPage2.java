/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import meetingmanager.control.MeetingControl;
import meetingmanager.entity.Employee;
import meetingmanager.entity.Meeting;
import meetingmanager.entity.Room;
import meetingmanager.entity.TimeSlot;
import meetingmanager.exception.EntityNotFoundException;
import static meetingmanager.userinterface.UIUtils.*;
import static meetingmanager.utils.Utils.*;

/**
 *
 * @author Matthew
 */
public class AddMeetingPage2 extends javax.swing.JPanel {
    
    public static final int LOCATION = 0;
    public static final int TIME = 1;
    
    private EmployeePage grandParent;
    private List<Employee> invitees;
    private Employee owner;
    private Map<Room,SortedSet<TimeSlot>> times;
    private double durationInHours;

    /**
     * Creates new form AddMeetingPage2
     */
    public AddMeetingPage2(String[] empArr, Employee owner) {
        initComponents();
        clearTable(jTable1);
        this.invitees = loadEmployees(empArr);
        this.owner = owner;
        this.durationInHours = 1;
        this.times = loadMeetingTimes();
        loadTimeTable();
    }
    
    public AddMeetingPage2 setGrandParent(EmployeePage grandParent) {
        this.grandParent = grandParent;
        return this;
    }
    
    private void loadTimeTable() {
        for(Room room : times.keySet()) {
            for(TimeSlot time : times.get(room)) {
                addRow(jTable1, new Object[] { room.getLocation(), time.getStartTime() });
            }
        }
    }
    
    private List<Employee> getAllAttendees() {
        List<Employee> attendees = new ArrayList<>(invitees);
        attendees.add(owner);
        return attendees;
    }
    
    private Employee[] attendeesAsArray() {
        List<Employee> allAttendees = getAllAttendees();
        return allAttendees.toArray(new Employee[allAttendees.size()]);
    }
    
    private Map<Room, SortedSet<TimeSlot>> loadMeetingTimes() {
        try {
            return MeetingControl.getCoincidingTimes(durationInHours, attendeesAsArray());
        } catch (SQLException e) {
            showMessage("Uh oh, something went wrong when trying to compile meeting times.");
            e.printStackTrace();
        }
        return new HashMap<>();
    }
            
    private List<Employee> loadEmployees(String[] empArr) {
        try{
            return MeetingControl.getEmployees(empArr);
        } catch (SQLException e) {
            showMessage("Error while attempting to access employee table");
            e.printStackTrace();
        } catch (EntityNotFoundException e) {
            showMessage("Entity not found exception while trying to access employee table");
            e.printStackTrace();
        }
        return new ArrayList<>();
    }

    private void loadMeetings(){
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Location", "Time"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Create Meeting");

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)
                        .addGap(211, 211, 211)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(261, 261, 261)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(21, 21, 21))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(AddMeetingPage2.this);
        topFrame.add(new AddMeetingPage(owner));
        AddMeetingPage2.this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // SELECT MEETING
        selectMeeting();
    }//GEN-LAST:event_jButton2ActionPerformed

    protected void selectMeeting() {
        if(nothingSelected()) {
            showMessage("Please select a meeting first");
            return;
        } else {
            try {
                Meeting meeting = getSelectedMeeting();
                MeetingControl.addMeeting(meeting, false);
                grandParent.refreshSchedule();
                grandParent.refreshMeetings();
                showMessage("Meeting added.");
            } catch(SQLException e) {
                showMessage("Database issue while adding meeting.");
                e.printStackTrace();
            }
        } 
    }
    
    protected boolean nothingSelected() {
        return jTable1.getSelectedRow() < 0;
    }
    
    protected Meeting getSelectedMeeting() {
        int rowSelected = jTable1.getSelectedRow();
        Date startTime = (Date) jTable1.getValueAt(rowSelected, TIME);
        Meeting meeting = new Meeting()
                .setLocation(findRoom((String) jTable1.getValueAt(rowSelected, LOCATION)))
                .setOwner(owner)
                .setInvited(invitees);

        meeting.setTitle("test title");
        meeting.setStartTime(startTime);
        meeting.setEndTime(timeAfterInterval(startTime, durationInHours));
        return meeting;
    }
    
    private Room findRoom(String location) {
        for (Room room : times.keySet())
            if(room.getLocation().equals(location))
                return room;
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
